#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Simple.SAMS.Competitions.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SimpleITASAMS")]
	public partial class CompetitionsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCompetition(Competition instance);
    partial void UpdateCompetition(Competition instance);
    partial void DeleteCompetition(Competition instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    partial void InsertMatchScore(MatchScore instance);
    partial void UpdateMatchScore(MatchScore instance);
    partial void DeleteMatchScore(MatchScore instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertSection(Section instance);
    partial void UpdateSection(Section instance);
    partial void DeleteSection(Section instance);
    partial void InsertMatch(Match instance);
    partial void UpdateMatch(Match instance);
    partial void DeleteMatch(Match instance);
    partial void InsertCompetitionType(CompetitionType instance);
    partial void UpdateCompetitionType(CompetitionType instance);
    partial void DeleteCompetitionType(CompetitionType instance);
    partial void InsertCompetitionPlayer(CompetitionPlayer instance);
    partial void UpdateCompetitionPlayer(CompetitionPlayer instance);
    partial void DeleteCompetitionPlayer(CompetitionPlayer instance);
    #endregion
		
		public CompetitionsDataContext() : 
				base(global::Simple.SAMS.Competitions.Data.Properties.Settings.Default.SimpleITASAMSConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CompetitionsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompetitionsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompetitionsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompetitionsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Competition> Competitions
		{
			get
			{
				return this.GetTable<Competition>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfiles
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
		
		public System.Data.Linq.Table<MatchScore> MatchScores
		{
			get
			{
				return this.GetTable<MatchScore>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<Section> Sections
		{
			get
			{
				return this.GetTable<Section>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Match> Matches
		{
			get
			{
				return this.GetTable<Match>();
			}
		}
		
		public System.Data.Linq.Table<CompetitionType> CompetitionTypes
		{
			get
			{
				return this.GetTable<CompetitionType>();
			}
		}
		
		public System.Data.Linq.Table<CompetitionPlayer> CompetitionPlayers
		{
			get
			{
				return this.GetTable<CompetitionPlayer>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Competition")]
	public partial class Competition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.DateTime _StartDate;
		
		private int _TypeId;
		
		private int _RowStatus;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private string _ReferenceId;
		
		private int _Status;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private string _Site;
		
		private string _MainReferee;
		
		private string _MainRefereePhone;
		
		private string _SitePhone;
		
		private EntitySet<Match> _Matches;
		
		private EntitySet<CompetitionPlayer> _CompetitionPlayers;
		
		private EntityRef<CompetitionType> _CompetitionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnTypeIdChanging(int value);
    partial void OnTypeIdChanged();
    partial void OnRowStatusChanging(int value);
    partial void OnRowStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnReferenceIdChanging(string value);
    partial void OnReferenceIdChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnSiteChanging(string value);
    partial void OnSiteChanged();
    partial void OnMainRefereeChanging(string value);
    partial void OnMainRefereeChanged();
    partial void OnMainRefereePhoneChanging(string value);
    partial void OnMainRefereePhoneChanged();
    partial void OnSitePhoneChanging(string value);
    partial void OnSitePhoneChanged();
    #endregion
		
		public Competition()
		{
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._CompetitionPlayers = new EntitySet<CompetitionPlayer>(new Action<CompetitionPlayer>(this.attach_CompetitionPlayers), new Action<CompetitionPlayer>(this.detach_CompetitionPlayers));
			this._CompetitionType = default(EntityRef<CompetitionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", DbType="Int NOT NULL")]
		public int TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					if (this._CompetitionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowStatus", DbType="Int NOT NULL")]
		public int RowStatus
		{
			get
			{
				return this._RowStatus;
			}
			set
			{
				if ((this._RowStatus != value))
				{
					this.OnRowStatusChanging(value);
					this.SendPropertyChanging();
					this._RowStatus = value;
					this.SendPropertyChanged("RowStatus");
					this.OnRowStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceId", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ReferenceId
		{
			get
			{
				return this._ReferenceId;
			}
			set
			{
				if ((this._ReferenceId != value))
				{
					this.OnReferenceIdChanging(value);
					this.SendPropertyChanging();
					this._ReferenceId = value;
					this.SendPropertyChanged("ReferenceId");
					this.OnReferenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Site", DbType="NVarChar(200)")]
		public string Site
		{
			get
			{
				return this._Site;
			}
			set
			{
				if ((this._Site != value))
				{
					this.OnSiteChanging(value);
					this.SendPropertyChanging();
					this._Site = value;
					this.SendPropertyChanged("Site");
					this.OnSiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainReferee", DbType="NVarChar(100)")]
		public string MainReferee
		{
			get
			{
				return this._MainReferee;
			}
			set
			{
				if ((this._MainReferee != value))
				{
					this.OnMainRefereeChanging(value);
					this.SendPropertyChanging();
					this._MainReferee = value;
					this.SendPropertyChanged("MainReferee");
					this.OnMainRefereeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainRefereePhone", DbType="NVarChar(20)")]
		public string MainRefereePhone
		{
			get
			{
				return this._MainRefereePhone;
			}
			set
			{
				if ((this._MainRefereePhone != value))
				{
					this.OnMainRefereePhoneChanging(value);
					this.SendPropertyChanging();
					this._MainRefereePhone = value;
					this.SendPropertyChanged("MainRefereePhone");
					this.OnMainRefereePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SitePhone", DbType="NVarChar(20)")]
		public string SitePhone
		{
			get
			{
				return this._SitePhone;
			}
			set
			{
				if ((this._SitePhone != value))
				{
					this.OnSitePhoneChanging(value);
					this.SendPropertyChanging();
					this._SitePhone = value;
					this.SendPropertyChanged("SitePhone");
					this.OnSitePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competition_Match", Storage="_Matches", ThisKey="Id", OtherKey="CompetitionId")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competition_CompetitionPlayer", Storage="_CompetitionPlayers", ThisKey="Id", OtherKey="CompetitionId")]
		public EntitySet<CompetitionPlayer> CompetitionPlayers
		{
			get
			{
				return this._CompetitionPlayers;
			}
			set
			{
				this._CompetitionPlayers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompetitionType_Competition", Storage="_CompetitionType", ThisKey="TypeId", OtherKey="Id", IsForeignKey=true)]
		public CompetitionType CompetitionType
		{
			get
			{
				return this._CompetitionType.Entity;
			}
			set
			{
				CompetitionType previousValue = this._CompetitionType.Entity;
				if (((previousValue != value) 
							|| (this._CompetitionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompetitionType.Entity = null;
						previousValue.Competitions.Remove(this);
					}
					this._CompetitionType.Entity = value;
					if ((value != null))
					{
						value.Competitions.Add(this);
						this._TypeId = value.Id;
					}
					else
					{
						this._TypeId = default(int);
					}
					this.SendPropertyChanged("CompetitionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Competition = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Competition = null;
		}
		
		private void attach_CompetitionPlayers(CompetitionPlayer entity)
		{
			this.SendPropertyChanging();
			entity.Competition = this;
		}
		
		private void detach_CompetitionPlayers(CompetitionPlayer entity)
		{
			this.SendPropertyChanging();
			entity.Competition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfile")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public UserProfile()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(56) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MatchScore")]
	public partial class MatchScore : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MatchId;
		
		private int _SetNumber;
		
		private int _Player1Points;
		
		private int _Player2Points;
		
		private int _BreakPoints;
		
		private EntityRef<Match> _Match;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(int value);
    partial void OnMatchIdChanged();
    partial void OnSetNumberChanging(int value);
    partial void OnSetNumberChanged();
    partial void OnPlayer1PointsChanging(int value);
    partial void OnPlayer1PointsChanged();
    partial void OnPlayer2PointsChanging(int value);
    partial void OnPlayer2PointsChanged();
    partial void OnBreakPointsChanging(int value);
    partial void OnBreakPointsChanged();
    #endregion
		
		public MatchScore()
		{
			this._Match = default(EntityRef<Match>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SetNumber
		{
			get
			{
				return this._SetNumber;
			}
			set
			{
				if ((this._SetNumber != value))
				{
					this.OnSetNumberChanging(value);
					this.SendPropertyChanging();
					this._SetNumber = value;
					this.SendPropertyChanged("SetNumber");
					this.OnSetNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player1Points", DbType="Int NOT NULL")]
		public int Player1Points
		{
			get
			{
				return this._Player1Points;
			}
			set
			{
				if ((this._Player1Points != value))
				{
					this.OnPlayer1PointsChanging(value);
					this.SendPropertyChanging();
					this._Player1Points = value;
					this.SendPropertyChanged("Player1Points");
					this.OnPlayer1PointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player2Points", DbType="Int NOT NULL")]
		public int Player2Points
		{
			get
			{
				return this._Player2Points;
			}
			set
			{
				if ((this._Player2Points != value))
				{
					this.OnPlayer2PointsChanging(value);
					this.SendPropertyChanging();
					this._Player2Points = value;
					this.SendPropertyChanged("Player2Points");
					this.OnPlayer2PointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BreakPoints", DbType="Int NOT NULL")]
		public int BreakPoints
		{
			get
			{
				return this._BreakPoints;
			}
			set
			{
				if ((this._BreakPoints != value))
				{
					this.OnBreakPointsChanging(value);
					this.SendPropertyChanging();
					this._BreakPoints = value;
					this.SendPropertyChanged("BreakPoints");
					this.OnBreakPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchScore", Storage="_Match", ThisKey="MatchId", OtherKey="Id", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.MatchScores.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.MatchScores.Add(this);
						this._MatchId = value.Id;
					}
					else
					{
						this._MatchId = default(int);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Player")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _LocalFirstName;
		
		private string _IdNumber;
		
		private System.Nullable<int> _NationalRank;
		
		private int _RowStatus;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private string _LocalLastName;
		
		private string _EnglishFirstName;
		
		private string _EnglishLastName;
		
		private System.Nullable<bool> _IsFemale;
		
		private System.Nullable<int> _EuropeInternationalRank;
		
		private System.Nullable<int> _YouthInternationalRank;
		
		private string _Country;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private string _IPIN;
		
		private string _Phone;
		
		private EntitySet<Match> _Matches;
		
		private EntitySet<Match> _Matches1;
		
		private EntitySet<Match> _Matches2;
		
		private EntitySet<Match> _Matches3;
		
		private EntitySet<CompetitionPlayer> _CompetitionPlayers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLocalFirstNameChanging(string value);
    partial void OnLocalFirstNameChanged();
    partial void OnIdNumberChanging(string value);
    partial void OnIdNumberChanged();
    partial void OnNationalRankChanging(System.Nullable<int> value);
    partial void OnNationalRankChanged();
    partial void OnRowStatusChanging(int value);
    partial void OnRowStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnLocalLastNameChanging(string value);
    partial void OnLocalLastNameChanged();
    partial void OnEnglishFirstNameChanging(string value);
    partial void OnEnglishFirstNameChanged();
    partial void OnEnglishLastNameChanging(string value);
    partial void OnEnglishLastNameChanged();
    partial void OnIsFemaleChanging(System.Nullable<bool> value);
    partial void OnIsFemaleChanged();
    partial void OnEuropeInternationalRankChanging(System.Nullable<int> value);
    partial void OnEuropeInternationalRankChanged();
    partial void OnYouthInternationalRankChanging(System.Nullable<int> value);
    partial void OnYouthInternationalRankChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnIPINChanging(string value);
    partial void OnIPINChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
		
		public Player()
		{
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._Matches1 = new EntitySet<Match>(new Action<Match>(this.attach_Matches1), new Action<Match>(this.detach_Matches1));
			this._Matches2 = new EntitySet<Match>(new Action<Match>(this.attach_Matches2), new Action<Match>(this.detach_Matches2));
			this._Matches3 = new EntitySet<Match>(new Action<Match>(this.attach_Matches3), new Action<Match>(this.detach_Matches3));
			this._CompetitionPlayers = new EntitySet<CompetitionPlayer>(new Action<CompetitionPlayer>(this.attach_CompetitionPlayers), new Action<CompetitionPlayer>(this.detach_CompetitionPlayers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalFirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LocalFirstName
		{
			get
			{
				return this._LocalFirstName;
			}
			set
			{
				if ((this._LocalFirstName != value))
				{
					this.OnLocalFirstNameChanging(value);
					this.SendPropertyChanging();
					this._LocalFirstName = value;
					this.SendPropertyChanged("LocalFirstName");
					this.OnLocalFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string IdNumber
		{
			get
			{
				return this._IdNumber;
			}
			set
			{
				if ((this._IdNumber != value))
				{
					this.OnIdNumberChanging(value);
					this.SendPropertyChanging();
					this._IdNumber = value;
					this.SendPropertyChanged("IdNumber");
					this.OnIdNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalRank", DbType="Int")]
		public System.Nullable<int> NationalRank
		{
			get
			{
				return this._NationalRank;
			}
			set
			{
				if ((this._NationalRank != value))
				{
					this.OnNationalRankChanging(value);
					this.SendPropertyChanging();
					this._NationalRank = value;
					this.SendPropertyChanged("NationalRank");
					this.OnNationalRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowStatus", DbType="Int NOT NULL")]
		public int RowStatus
		{
			get
			{
				return this._RowStatus;
			}
			set
			{
				if ((this._RowStatus != value))
				{
					this.OnRowStatusChanging(value);
					this.SendPropertyChanging();
					this._RowStatus = value;
					this.SendPropertyChanged("RowStatus");
					this.OnRowStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalLastName", DbType="NVarChar(50)")]
		public string LocalLastName
		{
			get
			{
				return this._LocalLastName;
			}
			set
			{
				if ((this._LocalLastName != value))
				{
					this.OnLocalLastNameChanging(value);
					this.SendPropertyChanging();
					this._LocalLastName = value;
					this.SendPropertyChanged("LocalLastName");
					this.OnLocalLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnglishFirstName", DbType="NVarChar(50)")]
		public string EnglishFirstName
		{
			get
			{
				return this._EnglishFirstName;
			}
			set
			{
				if ((this._EnglishFirstName != value))
				{
					this.OnEnglishFirstNameChanging(value);
					this.SendPropertyChanging();
					this._EnglishFirstName = value;
					this.SendPropertyChanged("EnglishFirstName");
					this.OnEnglishFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnglishLastName", DbType="NVarChar(50)")]
		public string EnglishLastName
		{
			get
			{
				return this._EnglishLastName;
			}
			set
			{
				if ((this._EnglishLastName != value))
				{
					this.OnEnglishLastNameChanging(value);
					this.SendPropertyChanging();
					this._EnglishLastName = value;
					this.SendPropertyChanged("EnglishLastName");
					this.OnEnglishLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFemale", DbType="Bit")]
		public System.Nullable<bool> IsFemale
		{
			get
			{
				return this._IsFemale;
			}
			set
			{
				if ((this._IsFemale != value))
				{
					this.OnIsFemaleChanging(value);
					this.SendPropertyChanging();
					this._IsFemale = value;
					this.SendPropertyChanged("IsFemale");
					this.OnIsFemaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EuropeInternationalRank", DbType="Int")]
		public System.Nullable<int> EuropeInternationalRank
		{
			get
			{
				return this._EuropeInternationalRank;
			}
			set
			{
				if ((this._EuropeInternationalRank != value))
				{
					this.OnEuropeInternationalRankChanging(value);
					this.SendPropertyChanging();
					this._EuropeInternationalRank = value;
					this.SendPropertyChanged("EuropeInternationalRank");
					this.OnEuropeInternationalRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YouthInternationalRank", DbType="Int")]
		public System.Nullable<int> YouthInternationalRank
		{
			get
			{
				return this._YouthInternationalRank;
			}
			set
			{
				if ((this._YouthInternationalRank != value))
				{
					this.OnYouthInternationalRankChanging(value);
					this.SendPropertyChanging();
					this._YouthInternationalRank = value;
					this.SendPropertyChanged("YouthInternationalRank");
					this.OnYouthInternationalRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(100)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPIN", DbType="NVarChar(10)")]
		public string IPIN
		{
			get
			{
				return this._IPIN;
			}
			set
			{
				if ((this._IPIN != value))
				{
					this.OnIPINChanging(value);
					this.SendPropertyChanging();
					this._IPIN = value;
					this.SendPropertyChanged("IPIN");
					this.OnIPINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(15)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Match", Storage="_Matches", ThisKey="Id", OtherKey="Player1")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Match1", Storage="_Matches1", ThisKey="Id", OtherKey="Player2")]
		public EntitySet<Match> Matches1
		{
			get
			{
				return this._Matches1;
			}
			set
			{
				this._Matches1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Match2", Storage="_Matches2", ThisKey="Id", OtherKey="Player3")]
		public EntitySet<Match> Matches2
		{
			get
			{
				return this._Matches2;
			}
			set
			{
				this._Matches2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Match3", Storage="_Matches3", ThisKey="Id", OtherKey="Player4")]
		public EntitySet<Match> Matches3
		{
			get
			{
				return this._Matches3;
			}
			set
			{
				this._Matches3.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_CompetitionPlayer", Storage="_CompetitionPlayers", ThisKey="Id", OtherKey="PlayerId")]
		public EntitySet<CompetitionPlayer> CompetitionPlayers
		{
			get
			{
				return this._CompetitionPlayers;
			}
			set
			{
				this._CompetitionPlayers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
		
		private void attach_Matches1(Match entity)
		{
			this.SendPropertyChanging();
			entity.Player5 = this;
		}
		
		private void detach_Matches1(Match entity)
		{
			this.SendPropertyChanging();
			entity.Player5 = null;
		}
		
		private void attach_Matches2(Match entity)
		{
			this.SendPropertyChanging();
			entity.Player6 = this;
		}
		
		private void detach_Matches2(Match entity)
		{
			this.SendPropertyChanging();
			entity.Player6 = null;
		}
		
		private void attach_Matches3(Match entity)
		{
			this.SendPropertyChanging();
			entity.Player7 = this;
		}
		
		private void detach_Matches3(Match entity)
		{
			this.SendPropertyChanging();
			entity.Player7 = null;
		}
		
		private void attach_CompetitionPlayers(CompetitionPlayer entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_CompetitionPlayers(CompetitionPlayer entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Section")]
	public partial class Section : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Match> _Matches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Section()
		{
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_Match", Storage="_Matches", ThisKey="Id", OtherKey="SectionId")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Section = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Section = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User
	{
		
		private int _UserId;
		
		private string _UserName;
		
		private System.Nullable<bool> _IsActive;
		
		public User()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(56) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Match")]
	public partial class Match : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _RowStatus;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private int _CompetitionId;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private int _Status;
		
		private int _Round;
		
		private System.Nullable<int> _Position;
		
		private int _SectionId;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private int _StartTimeType;
		
		private System.Nullable<int> _Player1;
		
		private System.Nullable<int> _Player2;
		
		private System.Nullable<int> _Player3;
		
		private System.Nullable<int> _Player4;
		
		private int _Player1Points;
		
		private int _Player2Points;
		
		private int _BreakPoints;
		
		private System.Nullable<int> _Result;
		
		private System.Nullable<int> _Winner;
		
		private EntitySet<MatchScore> _MatchScores;
		
		private EntityRef<Competition> _Competition;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<Player> _Player5;
		
		private EntityRef<Player> _Player6;
		
		private EntityRef<Player> _Player7;
		
		private EntityRef<Section> _Section;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRowStatusChanging(int value);
    partial void OnRowStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnCompetitionIdChanging(int value);
    partial void OnCompetitionIdChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnRoundChanging(int value);
    partial void OnRoundChanged();
    partial void OnPositionChanging(System.Nullable<int> value);
    partial void OnPositionChanged();
    partial void OnSectionIdChanging(int value);
    partial void OnSectionIdChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnStartTimeTypeChanging(int value);
    partial void OnStartTimeTypeChanged();
    partial void OnPlayer1Changing(System.Nullable<int> value);
    partial void OnPlayer1Changed();
    partial void OnPlayer2Changing(System.Nullable<int> value);
    partial void OnPlayer2Changed();
    partial void OnPlayer3Changing(System.Nullable<int> value);
    partial void OnPlayer3Changed();
    partial void OnPlayer4Changing(System.Nullable<int> value);
    partial void OnPlayer4Changed();
    partial void OnPlayer1PointsChanging(int value);
    partial void OnPlayer1PointsChanged();
    partial void OnPlayer2PointsChanging(int value);
    partial void OnPlayer2PointsChanged();
    partial void OnBreakPointsChanging(int value);
    partial void OnBreakPointsChanged();
    partial void OnResultChanging(System.Nullable<int> value);
    partial void OnResultChanged();
    partial void OnWinnerChanging(System.Nullable<int> value);
    partial void OnWinnerChanged();
    #endregion
		
		public Match()
		{
			this._MatchScores = new EntitySet<MatchScore>(new Action<MatchScore>(this.attach_MatchScores), new Action<MatchScore>(this.detach_MatchScores));
			this._Competition = default(EntityRef<Competition>);
			this._Player = default(EntityRef<Player>);
			this._Player5 = default(EntityRef<Player>);
			this._Player6 = default(EntityRef<Player>);
			this._Player7 = default(EntityRef<Player>);
			this._Section = default(EntityRef<Section>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowStatus", DbType="Int NOT NULL")]
		public int RowStatus
		{
			get
			{
				return this._RowStatus;
			}
			set
			{
				if ((this._RowStatus != value))
				{
					this.OnRowStatusChanging(value);
					this.SendPropertyChanging();
					this._RowStatus = value;
					this.SendPropertyChanged("RowStatus");
					this.OnRowStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionId", DbType="Int NOT NULL")]
		public int CompetitionId
		{
			get
			{
				return this._CompetitionId;
			}
			set
			{
				if ((this._CompetitionId != value))
				{
					if (this._Competition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompetitionIdChanging(value);
					this.SendPropertyChanging();
					this._CompetitionId = value;
					this.SendPropertyChanged("CompetitionId");
					this.OnCompetitionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="Int NOT NULL")]
		public int Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int")]
		public System.Nullable<int> Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionId", DbType="Int NOT NULL")]
		public int SectionId
		{
			get
			{
				return this._SectionId;
			}
			set
			{
				if ((this._SectionId != value))
				{
					if (this._Section.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectionIdChanging(value);
					this.SendPropertyChanging();
					this._SectionId = value;
					this.SendPropertyChanged("SectionId");
					this.OnSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTimeType", DbType="Int NOT NULL")]
		public int StartTimeType
		{
			get
			{
				return this._StartTimeType;
			}
			set
			{
				if ((this._StartTimeType != value))
				{
					this.OnStartTimeTypeChanging(value);
					this.SendPropertyChanging();
					this._StartTimeType = value;
					this.SendPropertyChanged("StartTimeType");
					this.OnStartTimeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player1", DbType="Int")]
		public System.Nullable<int> Player1
		{
			get
			{
				return this._Player1;
			}
			set
			{
				if ((this._Player1 != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayer1Changing(value);
					this.SendPropertyChanging();
					this._Player1 = value;
					this.SendPropertyChanged("Player1");
					this.OnPlayer1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player2", DbType="Int")]
		public System.Nullable<int> Player2
		{
			get
			{
				return this._Player2;
			}
			set
			{
				if ((this._Player2 != value))
				{
					if (this._Player5.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayer2Changing(value);
					this.SendPropertyChanging();
					this._Player2 = value;
					this.SendPropertyChanged("Player2");
					this.OnPlayer2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player3", DbType="Int")]
		public System.Nullable<int> Player3
		{
			get
			{
				return this._Player3;
			}
			set
			{
				if ((this._Player3 != value))
				{
					if (this._Player6.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayer3Changing(value);
					this.SendPropertyChanging();
					this._Player3 = value;
					this.SendPropertyChanged("Player3");
					this.OnPlayer3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player4", DbType="Int")]
		public System.Nullable<int> Player4
		{
			get
			{
				return this._Player4;
			}
			set
			{
				if ((this._Player4 != value))
				{
					if (this._Player7.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayer4Changing(value);
					this.SendPropertyChanging();
					this._Player4 = value;
					this.SendPropertyChanged("Player4");
					this.OnPlayer4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player1Points", DbType="Int NOT NULL")]
		public int Player1Points
		{
			get
			{
				return this._Player1Points;
			}
			set
			{
				if ((this._Player1Points != value))
				{
					this.OnPlayer1PointsChanging(value);
					this.SendPropertyChanging();
					this._Player1Points = value;
					this.SendPropertyChanged("Player1Points");
					this.OnPlayer1PointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player2Points", DbType="Int NOT NULL")]
		public int Player2Points
		{
			get
			{
				return this._Player2Points;
			}
			set
			{
				if ((this._Player2Points != value))
				{
					this.OnPlayer2PointsChanging(value);
					this.SendPropertyChanging();
					this._Player2Points = value;
					this.SendPropertyChanged("Player2Points");
					this.OnPlayer2PointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BreakPoints", DbType="Int NOT NULL")]
		public int BreakPoints
		{
			get
			{
				return this._BreakPoints;
			}
			set
			{
				if ((this._BreakPoints != value))
				{
					this.OnBreakPointsChanging(value);
					this.SendPropertyChanging();
					this._BreakPoints = value;
					this.SendPropertyChanged("BreakPoints");
					this.OnBreakPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="Int")]
		public System.Nullable<int> Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Winner", DbType="Int")]
		public System.Nullable<int> Winner
		{
			get
			{
				return this._Winner;
			}
			set
			{
				if ((this._Winner != value))
				{
					this.OnWinnerChanging(value);
					this.SendPropertyChanging();
					this._Winner = value;
					this.SendPropertyChanged("Winner");
					this.OnWinnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchScore", Storage="_MatchScores", ThisKey="Id", OtherKey="MatchId")]
		public EntitySet<MatchScore> MatchScores
		{
			get
			{
				return this._MatchScores;
			}
			set
			{
				this._MatchScores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competition_Match", Storage="_Competition", ThisKey="CompetitionId", OtherKey="Id", IsForeignKey=true)]
		public Competition Competition
		{
			get
			{
				return this._Competition.Entity;
			}
			set
			{
				Competition previousValue = this._Competition.Entity;
				if (((previousValue != value) 
							|| (this._Competition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Competition.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Competition.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._CompetitionId = value.Id;
					}
					else
					{
						this._CompetitionId = default(int);
					}
					this.SendPropertyChanged("Competition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Match", Storage="_Player", ThisKey="Player1", OtherKey="Id", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._Player1 = value.Id;
					}
					else
					{
						this._Player1 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Match1", Storage="_Player5", ThisKey="Player2", OtherKey="Id", IsForeignKey=true)]
		public Player Player5
		{
			get
			{
				return this._Player5.Entity;
			}
			set
			{
				Player previousValue = this._Player5.Entity;
				if (((previousValue != value) 
							|| (this._Player5.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player5.Entity = null;
						previousValue.Matches1.Remove(this);
					}
					this._Player5.Entity = value;
					if ((value != null))
					{
						value.Matches1.Add(this);
						this._Player2 = value.Id;
					}
					else
					{
						this._Player2 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Player5");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Match2", Storage="_Player6", ThisKey="Player3", OtherKey="Id", IsForeignKey=true)]
		public Player Player6
		{
			get
			{
				return this._Player6.Entity;
			}
			set
			{
				Player previousValue = this._Player6.Entity;
				if (((previousValue != value) 
							|| (this._Player6.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player6.Entity = null;
						previousValue.Matches2.Remove(this);
					}
					this._Player6.Entity = value;
					if ((value != null))
					{
						value.Matches2.Add(this);
						this._Player3 = value.Id;
					}
					else
					{
						this._Player3 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Player6");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Match3", Storage="_Player7", ThisKey="Player4", OtherKey="Id", IsForeignKey=true)]
		public Player Player7
		{
			get
			{
				return this._Player7.Entity;
			}
			set
			{
				Player previousValue = this._Player7.Entity;
				if (((previousValue != value) 
							|| (this._Player7.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player7.Entity = null;
						previousValue.Matches3.Remove(this);
					}
					this._Player7.Entity = value;
					if ((value != null))
					{
						value.Matches3.Add(this);
						this._Player4 = value.Id;
					}
					else
					{
						this._Player4 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Player7");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_Match", Storage="_Section", ThisKey="SectionId", OtherKey="Id", IsForeignKey=true)]
		public Section Section
		{
			get
			{
				return this._Section.Entity;
			}
			set
			{
				Section previousValue = this._Section.Entity;
				if (((previousValue != value) 
							|| (this._Section.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Section.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Section.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._SectionId = value.Id;
					}
					else
					{
						this._SectionId = default(int);
					}
					this.SendPropertyChanged("Section");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MatchScores(MatchScore entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_MatchScores(MatchScore entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompetitionType")]
	public partial class CompetitionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _RowStatus;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private int _PlayersCount;
		
		private int _CompetitionMethod;
		
		private int _WildcardPlayersCount;
		
		private int _QualifyingPlayersCount;
		
		private int _QualifyingPairsCount;
		
		private int _WildcardPairsCount;
		
		private int _PairsCount;
		
		private bool _HasConsolation;
		
		private int _Ranking;
		
		private int _QualifyingWildcardPlayersCount;
		
		private int _QualifyingWildcardPairsCount;
		
		private int _QualifyingToFinalPlayersCount;
		
		private int _QualifyingToFinalPaisCount;
		
		private EntitySet<Competition> _Competitions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRowStatusChanging(int value);
    partial void OnRowStatusChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnPlayersCountChanging(int value);
    partial void OnPlayersCountChanged();
    partial void OnCompetitionMethodChanging(int value);
    partial void OnCompetitionMethodChanged();
    partial void OnWildcardPlayersCountChanging(int value);
    partial void OnWildcardPlayersCountChanged();
    partial void OnQualifyingPlayersCountChanging(int value);
    partial void OnQualifyingPlayersCountChanged();
    partial void OnQualifyingPairsCountChanging(int value);
    partial void OnQualifyingPairsCountChanged();
    partial void OnWildcardPairsCountChanging(int value);
    partial void OnWildcardPairsCountChanged();
    partial void OnPairsCountChanging(int value);
    partial void OnPairsCountChanged();
    partial void OnHasConsolationChanging(bool value);
    partial void OnHasConsolationChanged();
    partial void OnRankingChanging(int value);
    partial void OnRankingChanged();
    partial void OnQualifyingWildcardPlayersCountChanging(int value);
    partial void OnQualifyingWildcardPlayersCountChanged();
    partial void OnQualifyingWildcardPairsCountChanging(int value);
    partial void OnQualifyingWildcardPairsCountChanged();
    partial void OnQualifyingToFinalPlayersCountChanging(int value);
    partial void OnQualifyingToFinalPlayersCountChanged();
    partial void OnQualifyingToFinalPaisCountChanging(int value);
    partial void OnQualifyingToFinalPaisCountChanged();
    #endregion
		
		public CompetitionType()
		{
			this._Competitions = new EntitySet<Competition>(new Action<Competition>(this.attach_Competitions), new Action<Competition>(this.detach_Competitions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowStatus", DbType="Int NOT NULL")]
		public int RowStatus
		{
			get
			{
				return this._RowStatus;
			}
			set
			{
				if ((this._RowStatus != value))
				{
					this.OnRowStatusChanging(value);
					this.SendPropertyChanging();
					this._RowStatus = value;
					this.SendPropertyChanged("RowStatus");
					this.OnRowStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayersCount", DbType="Int NOT NULL")]
		public int PlayersCount
		{
			get
			{
				return this._PlayersCount;
			}
			set
			{
				if ((this._PlayersCount != value))
				{
					this.OnPlayersCountChanging(value);
					this.SendPropertyChanging();
					this._PlayersCount = value;
					this.SendPropertyChanged("PlayersCount");
					this.OnPlayersCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionMethod", DbType="Int NOT NULL")]
		public int CompetitionMethod
		{
			get
			{
				return this._CompetitionMethod;
			}
			set
			{
				if ((this._CompetitionMethod != value))
				{
					this.OnCompetitionMethodChanging(value);
					this.SendPropertyChanging();
					this._CompetitionMethod = value;
					this.SendPropertyChanged("CompetitionMethod");
					this.OnCompetitionMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WildcardPlayersCount", DbType="Int NOT NULL")]
		public int WildcardPlayersCount
		{
			get
			{
				return this._WildcardPlayersCount;
			}
			set
			{
				if ((this._WildcardPlayersCount != value))
				{
					this.OnWildcardPlayersCountChanging(value);
					this.SendPropertyChanging();
					this._WildcardPlayersCount = value;
					this.SendPropertyChanged("WildcardPlayersCount");
					this.OnWildcardPlayersCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualifyingPlayersCount", DbType="Int NOT NULL")]
		public int QualifyingPlayersCount
		{
			get
			{
				return this._QualifyingPlayersCount;
			}
			set
			{
				if ((this._QualifyingPlayersCount != value))
				{
					this.OnQualifyingPlayersCountChanging(value);
					this.SendPropertyChanging();
					this._QualifyingPlayersCount = value;
					this.SendPropertyChanged("QualifyingPlayersCount");
					this.OnQualifyingPlayersCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualifyingPairsCount", DbType="Int NOT NULL")]
		public int QualifyingPairsCount
		{
			get
			{
				return this._QualifyingPairsCount;
			}
			set
			{
				if ((this._QualifyingPairsCount != value))
				{
					this.OnQualifyingPairsCountChanging(value);
					this.SendPropertyChanging();
					this._QualifyingPairsCount = value;
					this.SendPropertyChanged("QualifyingPairsCount");
					this.OnQualifyingPairsCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WildcardPairsCount", DbType="Int NOT NULL")]
		public int WildcardPairsCount
		{
			get
			{
				return this._WildcardPairsCount;
			}
			set
			{
				if ((this._WildcardPairsCount != value))
				{
					this.OnWildcardPairsCountChanging(value);
					this.SendPropertyChanging();
					this._WildcardPairsCount = value;
					this.SendPropertyChanged("WildcardPairsCount");
					this.OnWildcardPairsCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PairsCount", DbType="Int NOT NULL")]
		public int PairsCount
		{
			get
			{
				return this._PairsCount;
			}
			set
			{
				if ((this._PairsCount != value))
				{
					this.OnPairsCountChanging(value);
					this.SendPropertyChanging();
					this._PairsCount = value;
					this.SendPropertyChanged("PairsCount");
					this.OnPairsCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasConsolation", DbType="Bit NOT NULL")]
		public bool HasConsolation
		{
			get
			{
				return this._HasConsolation;
			}
			set
			{
				if ((this._HasConsolation != value))
				{
					this.OnHasConsolationChanging(value);
					this.SendPropertyChanging();
					this._HasConsolation = value;
					this.SendPropertyChanged("HasConsolation");
					this.OnHasConsolationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ranking", DbType="Int NOT NULL")]
		public int Ranking
		{
			get
			{
				return this._Ranking;
			}
			set
			{
				if ((this._Ranking != value))
				{
					this.OnRankingChanging(value);
					this.SendPropertyChanging();
					this._Ranking = value;
					this.SendPropertyChanged("Ranking");
					this.OnRankingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualifyingWildcardPlayersCount", DbType="Int NOT NULL")]
		public int QualifyingWildcardPlayersCount
		{
			get
			{
				return this._QualifyingWildcardPlayersCount;
			}
			set
			{
				if ((this._QualifyingWildcardPlayersCount != value))
				{
					this.OnQualifyingWildcardPlayersCountChanging(value);
					this.SendPropertyChanging();
					this._QualifyingWildcardPlayersCount = value;
					this.SendPropertyChanged("QualifyingWildcardPlayersCount");
					this.OnQualifyingWildcardPlayersCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualifyingWildcardPairsCount", DbType="Int NOT NULL")]
		public int QualifyingWildcardPairsCount
		{
			get
			{
				return this._QualifyingWildcardPairsCount;
			}
			set
			{
				if ((this._QualifyingWildcardPairsCount != value))
				{
					this.OnQualifyingWildcardPairsCountChanging(value);
					this.SendPropertyChanging();
					this._QualifyingWildcardPairsCount = value;
					this.SendPropertyChanged("QualifyingWildcardPairsCount");
					this.OnQualifyingWildcardPairsCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualifyingToFinalPlayersCount", DbType="Int NOT NULL")]
		public int QualifyingToFinalPlayersCount
		{
			get
			{
				return this._QualifyingToFinalPlayersCount;
			}
			set
			{
				if ((this._QualifyingToFinalPlayersCount != value))
				{
					this.OnQualifyingToFinalPlayersCountChanging(value);
					this.SendPropertyChanging();
					this._QualifyingToFinalPlayersCount = value;
					this.SendPropertyChanged("QualifyingToFinalPlayersCount");
					this.OnQualifyingToFinalPlayersCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualifyingToFinalPaisCount", DbType="Int NOT NULL")]
		public int QualifyingToFinalPaisCount
		{
			get
			{
				return this._QualifyingToFinalPaisCount;
			}
			set
			{
				if ((this._QualifyingToFinalPaisCount != value))
				{
					this.OnQualifyingToFinalPaisCountChanging(value);
					this.SendPropertyChanging();
					this._QualifyingToFinalPaisCount = value;
					this.SendPropertyChanged("QualifyingToFinalPaisCount");
					this.OnQualifyingToFinalPaisCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompetitionType_Competition", Storage="_Competitions", ThisKey="Id", OtherKey="TypeId")]
		public EntitySet<Competition> Competitions
		{
			get
			{
				return this._Competitions;
			}
			set
			{
				this._Competitions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Competitions(Competition entity)
		{
			this.SendPropertyChanging();
			entity.CompetitionType = this;
		}
		
		private void detach_Competitions(Competition entity)
		{
			this.SendPropertyChanging();
			entity.CompetitionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompetitionPlayer")]
	public partial class CompetitionPlayer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompetitionId;
		
		private int _PlayerId;
		
		private System.Nullable<int> _Rank;
		
		private int _Section;
		
		private int _Source;
		
		private EntityRef<Competition> _Competition;
		
		private EntityRef<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompetitionIdChanging(int value);
    partial void OnCompetitionIdChanged();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    partial void OnRankChanging(System.Nullable<int> value);
    partial void OnRankChanged();
    partial void OnSectionChanging(int value);
    partial void OnSectionChanged();
    partial void OnSourceChanging(int value);
    partial void OnSourceChanged();
    #endregion
		
		public CompetitionPlayer()
		{
			this._Competition = default(EntityRef<Competition>);
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompetitionId
		{
			get
			{
				return this._CompetitionId;
			}
			set
			{
				if ((this._CompetitionId != value))
				{
					if (this._Competition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompetitionIdChanging(value);
					this.SendPropertyChanging();
					this._CompetitionId = value;
					this.SendPropertyChanged("CompetitionId");
					this.OnCompetitionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rank", DbType="Int")]
		public System.Nullable<int> Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged("Rank");
					this.OnRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Section", DbType="Int NOT NULL")]
		public int Section
		{
			get
			{
				return this._Section;
			}
			set
			{
				if ((this._Section != value))
				{
					this.OnSectionChanging(value);
					this.SendPropertyChanging();
					this._Section = value;
					this.SendPropertyChanged("Section");
					this.OnSectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="Int NOT NULL")]
		public int Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competition_CompetitionPlayer", Storage="_Competition", ThisKey="CompetitionId", OtherKey="Id", IsForeignKey=true)]
		public Competition Competition
		{
			get
			{
				return this._Competition.Entity;
			}
			set
			{
				Competition previousValue = this._Competition.Entity;
				if (((previousValue != value) 
							|| (this._Competition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Competition.Entity = null;
						previousValue.CompetitionPlayers.Remove(this);
					}
					this._Competition.Entity = value;
					if ((value != null))
					{
						value.CompetitionPlayers.Add(this);
						this._CompetitionId = value.Id;
					}
					else
					{
						this._CompetitionId = default(int);
					}
					this.SendPropertyChanged("Competition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_CompetitionPlayer", Storage="_Player", ThisKey="PlayerId", OtherKey="Id", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.CompetitionPlayers.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.CompetitionPlayers.Add(this);
						this._PlayerId = value.Id;
					}
					else
					{
						this._PlayerId = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
